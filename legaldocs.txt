<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Legal Doc</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                    colors: {
                        'primary-gold': '#FFD700',
                        'dark-gold': '#B8860B',
                        'navy-blue': '#0A192F',
                        'light-navy': '#1F2A40',
                        'accent-light': '#FDF5E6',
                        'danger': '#DC2626',
                        'warning': '#FACC15',
                    },
                }
            }
        }
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1c2e; /* Dark navy background */
        }
        .container {
            max-width: 1024px;
        }
        .action-btn {
            @apply flex-1 font-bold py-3 px-6 rounded-xl shadow-lg transition-all transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2;
            background-image: linear-gradient(to right, var(--tw-primary-gold), var(--tw-dark-gold));
            color: #0A192F;
            border: none;
        }
        .loading-container {
            display: none;
            justify-content: center;
            align-items: center;
            padding: 2rem;
        }
        .dot-pulse {
            position: relative;
            left: -9999px;
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background-color: #FFD700;
            color: #FFD700;
            box-shadow: 9999px 0 0 -5px #FFD700;
            animation: dot-pulse 1.5s infinite linear;
            animation-delay: .25s;
        }
        .dot-pulse::before, .dot-pulse::after {
            content: '';
            display: inline-block;
            position: absolute;
            top: 0;
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background-color: #FFD700;
            color: #FFD700;
        }
        .dot-pulse::before {
            box-shadow: 9984px 0 0 -5px #FFD700;
            animation: dot-pulse 1.5s infinite linear;
            animation-delay: 0s;
        }
        .dot-pulse::after {
            box-shadow: 10014px 0 0 -5px #FFD700;
            animation: dot-pulse 1.5s infinite linear;
            animation-delay: .5s;
        }
        @keyframes dot-pulse {
            0% { box-shadow: 9999px 0 0 -5px #FFD700; }
            30% { box-shadow: 9999px 0 0 2px #FFD700; }
            60%, 100% { box-shadow: 9999px 0 0 -5px #FFD700; }
        }
    </style>
</head>
<body class="bg-navy-blue p-8">

    <div class="container mx-auto bg-gray-900 rounded-2xl shadow-2xl p-8 lg:p-12 space-y-10">
        <div class="text-center">
            <h1 class="text-4xl lg:text-5xl font-extrabold text-white leading-tight mb-4 flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12 mr-4 text-primary-gold" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="5" r="3" />
                    <path d="M12 22V8" />
                    <path d="M5 12H2a10 10 0 0 0 17.5 5c.42.98.67 2.11.75 3.29" />
                    <path d="M19 12h3a10 10 0 0 1-17.5 5c-.42.98-.67 2.11-.75 3.29" />
                </svg>
                Legal Doc
            </h1>
            <p class="text-gray-400 text-lg">Your smart assistant for understanding legal documents.</p>
        </div>
        
        <div class="flex justify-center mb-8">
            <img src="https://placehold.co/800x200/0A192F/FFD700?text=AI+Assisted+Legal+Analysis" class="rounded-xl shadow-lg w-full max-w-lg">
        </div>

        <!-- Action Buttons -->
        <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4">
            <button id="summarizeBtn" class="action-btn">Summarize</button>
            <button id="simplifyBtn" class="action-btn">Simplify</button>
            <button id="highlightBtn" class="action-btn">Highlight Clauses</button>
            <button id="qaBtn" class="action-btn">Q&A Assistant</button>
            <button id="compareBtn" class="action-btn">Compare</button>
            <button id="riskBtn" class="action-btn">Risk Check</button>
        </div>

        <!-- Input and Output Sections -->
        <div id="mainSection" class="space-y-6">
            <div id="inputGroup" class="space-y-4">
                <label for="documentInput" class="block text-gray-200 font-semibold text-lg">Paste your legal document</label>
                <textarea id="documentInput" rows="12" class="w-full p-4 border-2 border-gray-700 bg-gray-800 text-gray-100 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-gold resize-y shadow-sm" placeholder="Paste the full legal text here..."></textarea>
                <div id="secondaryInputContainer" class="hidden">
                    <!-- Dynamic secondary input for Q&A and Comparison -->
                </div>
            </div>

            <div class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
                <button id="processBtn" class="action-btn bg-gradient-to-r from-primary-gold to-dark-gold text-navy-blue py-4 px-8 rounded-xl">Process</button>
                <button id="clearBtn" class="flex-1 bg-gray-800 text-gray-100 font-bold py-4 px-8 rounded-xl shadow-lg hover:bg-gray-700 transition-colors transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2">Clear All</button>
            </div>
        </div>

        <div id="loadingIndicator" class="loading-container">
            <div class="dot-pulse"></div>
        </div>

        <div id="outputSection" class="mt-8 hidden">
            <div class="bg-light-navy p-6 rounded-xl border border-navy-blue shadow-inner">
                <h2 id="outputTitle" class="text-2xl font-bold text-white mb-4">Output</h2>
                <div id="outputContent" class="text-gray-300 leading-relaxed prose max-w-none"></div>
            </div>
        </div>

        <!-- Custom Modal for Alerts -->
        <div id="modal" class="hidden fixed inset-0 z-50 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-xl bg-gray-900 text-white">
                <div class="mt-3 text-center">
                    <h3 class="text-lg leading-6 font-medium text-white" id="modal-title"></h3>
                    <div class="mt-2 px-7 py-3">
                        <p class="text-sm text-gray-400" id="modal-message"></p>
                    </div>
                    <div class="items-center px-4 py-3">
                        <button id="modal-ok-btn" class="px-4 py-2 bg-primary-gold text-navy-blue text-base font-medium rounded-md w-full shadow-sm hover:bg-yellow-400 focus:outline-none focus:ring-2 focus:ring-primary-gold">
                            OK
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const API_ENDPOINT = '/api/generate';
        const documentInput = document.getElementById('documentInput');
        const secondaryInputContainer = document.getElementById('secondaryInputContainer');
        const processBtn = document.getElementById('processBtn');
        const clearBtn = document.getElementById('clearBtn');
        const outputSection = document.getElementById('outputSection');
        const outputTitle = document.getElementById('outputTitle');
        const outputContent = document.getElementById('outputContent');
        const loadingIndicator = document.getElementById('loadingIndicator');

        const modal = document.getElementById('modal');
        const modalTitle = document.getElementById('modal-title');
        const modalMessage = document.getElementById('modal-message');
        const modalOkBtn = document.getElementById('modal-ok-btn');

        let currentAction = '';

        const showModal = (title, message) => {
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            modal.classList.remove('hidden');
        };

        modalOkBtn.onclick = () => {
            modal.classList.add('hidden');
        };

        window.onclick = (event) => {
            if (event.target === modal) {
                modal.classList.add('hidden');
            }
        };

        const setActiveButton = (buttonId) => {
            document.querySelectorAll('.action-btn').forEach(btn => {
                btn.classList.remove('bg-gradient-to-r', 'from-primary-gold', 'to-dark-gold', 'text-navy-blue');
                btn.classList.add('bg-gray-800', 'text-gray-100');
                btn.style.backgroundImage = 'none';
            });
            const activeBtn = document.getElementById(buttonId);
            activeBtn.classList.remove('bg-gray-800', 'text-gray-100');
            activeBtn.classList.add('bg-gradient-to-r', 'from-primary-gold', 'to-dark-gold', 'text-navy-blue');
            activeBtn.style.backgroundImage = 'linear-gradient(to right, #FFD700, #B8860B)';
        };

        document.getElementById('summarizeBtn').addEventListener('click', () => {
            currentAction = 'summarize';
            setActiveButton('summarizeBtn');
            secondaryInputContainer.classList.add('hidden');
            processBtn.textContent = 'Summarize Document';
            outputSection.classList.add('hidden');
        });

        document.getElementById('simplifyBtn').addEventListener('click', () => {
            currentAction = 'simplify';
            setActiveButton('simplifyBtn');
            secondaryInputContainer.classList.add('hidden');
            processBtn.textContent = 'Simplify Document';
            outputSection.classList.add('hidden');
        });

        document.getElementById('highlightBtn').addEventListener('click', () => {
            currentAction = 'highlight';
            setActiveButton('highlightBtn');
            secondaryInputContainer.classList.add('hidden');
            processBtn.textContent = 'Identify Clauses';
            outputSection.classList.add('hidden');
        });

        document.getElementById('qaBtn').addEventListener('click', () => {
            currentAction = 'qa';
            setActiveButton('qaBtn');
            secondaryInputContainer.innerHTML = `
                <label for="qaInput" class="block text-gray-200 font-semibold text-lg">Ask a question</label>
                <input id="qaInput" type="text" class="w-full p-4 border-2 border-gray-700 bg-gray-800 text-gray-100 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-gold resize-y shadow-sm" placeholder="e.g., What happens if I terminate the contract early?">
            `;
            secondaryInputContainer.classList.remove('hidden');
            processBtn.textContent = 'Get Answer';
            outputSection.classList.add('hidden');
        });

        document.getElementById('compareBtn').addEventListener('click', () => {
            currentAction = 'compare';
            setActiveButton('compareBtn');
            secondaryInputContainer.innerHTML = `
                <label for="documentInput2" class="block text-gray-200 font-semibold text-lg">Paste the second document</label>
                <textarea id="documentInput2" rows="12" class="w-full p-4 border-2 border-gray-700 bg-gray-800 text-gray-100 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-gold resize-y shadow-sm" placeholder="Paste the second legal document here..."></textarea>
            `;
            secondaryInputContainer.classList.remove('hidden');
            processBtn.textContent = 'Compare Documents';
            outputSection.classList.add('hidden');
        });

        document.getElementById('riskBtn').addEventListener('click', () => {
            currentAction = 'risk';
            setActiveButton('riskBtn');
            secondaryInputContainer.classList.add('hidden');
            processBtn.textContent = 'Check for Risks';
            outputSection.classList.add('hidden');
        });

        processBtn.addEventListener('click', async () => {
            const documentText = documentInput.value.trim();
            if (!documentText) {
                showModal('Input Required', 'Please paste the primary legal document to continue.');
                return;
            }
            if (currentAction === 'qa' && !document.getElementById('qaInput').value.trim()) {
                showModal('Question Required', 'Please enter a question to get an answer.');
                return;
            }
            if (currentAction === 'compare' && !document.getElementById('documentInput2').value.trim()) {
                showModal('Second Document Required', 'Please paste the second legal document to compare.');
                return;
            }
            if (!currentAction) {
                showModal('Action Required', 'Please select an action before processing.');
                return;
            }

            outputSection.classList.add('hidden');
            loadingIndicator.style.display = 'flex';
            outputContent.innerHTML = '';

            let prompt = '';
            const documentInput2 = document.getElementById('documentInput2')?.value.trim();
            const qaInput = document.getElementById('qaInput')?.value.trim();

            switch (currentAction) {
                case 'summarize':
                    prompt = `Provide a concise, plain-English summary of the following legal document:\n\n${documentText}`;
                    outputTitle.textContent = 'Simplified Summary';
                    break;
                case 'simplify':
                    prompt = `Rewrite the following legal document into simple, everyday language, while preserving the original meaning. Avoid all legal jargon:\n\n${documentText}`;
                    outputTitle.textContent = 'Simplified Text';
                    break;
                case 'highlight':
                    prompt = `Identify and provide a summary of the most important clauses in the following legal document, such as termination, liability, or payment terms. Present the output as a bulleted list with bolded headings for each clause.:\n\n${documentText}`;
                    outputTitle.textContent = 'Highlighted Clauses';
                    break;
                case 'qa':
                    prompt = `Based on the following legal document, answer this question: "${qaInput}". The answer should be direct and based only on the provided text.\n\nDocument:\n${documentText}`;
                    outputTitle.textContent = 'Q&A Assistant';
                    break;
                case 'compare':
                    prompt = `Compare the following two legal documents. Highlight the major differences, similarities, and any conflicting clauses. Present the output in a clear, structured format with bolded headings.\n\nDocument 1:\n${documentText}\n\nDocument 2:\n${documentInput2}`;
                    outputTitle.textContent = 'Document Comparison';
                    break;
                case 'risk':
                    prompt = `Analyze the following legal document for unusual, one-sided, or high-risk terms. Identify clauses related to high penalties, automatic renewals, or limitations of liability, and explain the associated risks. Present the output as a bulleted list with bolded headings for each risk identified.\n\n${documentText}`;
                    outputTitle.textContent = 'Risk Analysis';
                    break;
            }

            try {
                const response = await fetch(API_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ prompt: prompt })
                });

                if (!response.ok) {
                    throw new Error(`API call failed with status: ${response.status}`);
                }

                const result = await response.json();
                if (result && result.generated_text) {
                    const text = result.generated_text.trim();
                    const formattedText = text.replace(/\n/g, '<br>');
                    outputContent.innerHTML = formattedText;
                    outputSection.classList.remove('hidden');
                } else {
                    throw new Error('Invalid response format from API');
                }
            } catch (error) {
                console.error('Error during API call:', error);
                showModal('Error', 'An error occurred while processing. Please try again.');
            } finally {
                loadingIndicator.style.display = 'none';
            }
        });

        clearBtn.addEventListener('click', () => {
            documentInput.value = '';
            if (currentAction === 'qa' && document.getElementById('qaInput')) {
                document.getElementById('qaInput').value = '';
            }
            if (currentAction === 'compare' && document.getElementById('documentInput2')) {
                document.getElementById('documentInput2').value = '';
            }
            outputContent.innerHTML = '';
            outputSection.classList.add('hidden');
        });
        
        // Initial state
        document.getElementById('summarizeBtn').click();
    </script>
</body>
</html>
